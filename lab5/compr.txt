
// entropy 
package javaapplication4;

import java.io.*;
import java.util.HashMap;

public class Main {

    public static void main(String[] args) {
        HashMap<Character, Integer> hmap = new HashMap<Character, Integer>();
        File file = new File("C:/Users/User7/Desktop/NewFolder/file.txt");
        char[] chars = new char[(int) file.length()];
        try {
           FileReader reader = new FileReader(file);
           reader.read(chars);
           reader.close();
        } catch (IOException e) {
           System.out.println(e.getMessage());
        }

     
        for (int i = 0; i < chars.length; i++) {
            if (hmap.containsKey(chars[i])) {
                 hmap.put(chars[i], hmap.get(chars[i]) + 1);
            } else {
                 hmap.put(chars[i], 1);
            }
        }

        for (Character key : hmap.keySet()) {
            System.out.println(key + ": "
                    + hmap.get(key)/(float)chars.length * 100 + "%");
       }
       double entropy = entropyc(hmap, chars.length);
       double redundancy = Log2(256) - entropy;
       double efficiency = entropy / Log2(256);
       System.out.println("Entropy: " + entropy);
       System.out.println("Redundancy: " + redundancy);
       System.out.println("Efficiency: " + efficiency);

       double prob = 0.0;
       for (Character key : hmap.keySet()) {
            prob += hmap.get(key)/(float)chars.length;
       }

       System.out.println();
       System.out.println(prob);

       System.out.println("---------------------------");
       System.out.println();
       
        HashMap<Byte, Integer> hmap2 = new HashMap<Byte, Integer>();
        File filebin = new File("C:/Users/User7/Desktop/NewFolder/flower.bmp");
        byte[] binData = new byte [(int)filebin.length()];
        try {
           FileInputStream reader = new FileInputStream(filebin);
           reader.read(binData);
           reader.close();
        } catch (IOException e) {
           System.out.println(e.getMessage());
        }

       
        for (int i = 0; i < binData.length; i++) {
            if (hmap2.containsKey(binData[i])) {
                 hmap2.put(binData[i], hmap2.get(binData[i]) + 1);
            } else {
                 hmap2.put(binData[i], 1);
            }
        }


        for (Byte key : hmap2.keySet()) {
            System.out.println(key + ": "
                    + hmap2.get(key)/(float)binData.length * 100 + "%");
        }

         double entropybin = entropy(hmap2, binData.length);
         double redundancybin = Log2(2) - entropybin;
         double efficiencybin = entropybin / Log2(2);
         System.out.println("Entropy: " + entropybin);
         System.out.println("Redundancy: " + redundancybin);
         System.out.println("Efficiency: " + efficiencybin);
         System.out.println();

         double probbin = 0.0;
         for (Byte key : hmap2.keySet()) {
            probbin += hmap2.get(key)/(float)binData.length;
        }
        System.out.println(probbin);
    }

    private static double entropy(HashMap<Byte, Integer> hmap, int length) {
        double entropy = 0;
        for (Byte key : hmap.keySet()) {
             double prob = (double) hmap.get(key)/length;
             entropy -= prob * Log2(prob);
        }
        return entropy;
    }

     private static double entropyc(HashMap<Character, Integer> hmap, int length) {
        double entropy = 0;
        for (Character key : hmap.keySet()) {
             double prob = (double) hmap.get(key)/length;
             entropy -= prob * Log2(prob);
        }
        return entropy;
    }

    private static double Log2(double n) {
           return Math.log(n) / Math.log(2);
    }

}


// Huffman

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Comparator;

class HuffmanNode {

    int data;
    char c;

    HuffmanNode left;
    HuffmanNode right;
}

class MyComparator implements Comparator<HuffmanNode> {
    public int compare(HuffmanNode x, HuffmanNode y)
    {

        return x.data - y.data;
    }
}

public class Huffman {
    public static void printCode(HuffmanNode root, String s)
    {
        if (root.left == null && root.right == null
                && (Character.isLetter(root.c) || root.c == ' ')) {

            System.out.println(root.c + ":" + s);

            return;
        }

        // daca mergem stanga adaugam "0"
        // daca mergem dreapta adaugam "1"
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    public static void main(String[] args)
    {

        HashMap<Character, Integer> hmap = new HashMap<Character, Integer>();
        File file = new File("./file.txt");
        char[] chars = new char[(int) file.length()];
        try {
            FileReader reader = new FileReader(file);
            reader.read(chars);
            reader.close();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }


        for (int i = 0; i < chars.length; i++) {
            if (hmap.containsKey(chars[i])) {
                hmap.put(chars[i], hmap.get(chars[i]) + 1);
            } else {
                hmap.put(chars[i], 1);
            }
        }

        for (Character key : hmap.keySet()) {
            System.out.println(key + ": "
                    + hmap.get(key)/(float)chars.length * 100 + "%");
        }

        PriorityQueue<HuffmanNode> q
                = new PriorityQueue<HuffmanNode>(hmap.size(), new MyComparator());

        for (Character key : hmap.keySet()) {

            HuffmanNode hn = new HuffmanNode();

            hn.c = key;
            hn.data = hmap.get(key);

            hn.left = null;
            hn.right = null;

            q.add(hn);
        }

        HuffmanNode root = null;


        // Aici vom extrage cele două valori minime
        while (q.size() > 1) {

            // prima min val
            HuffmanNode x = q.peek();
            q.poll();

            // a doua
            HuffmanNode y = q.peek();
            q.poll();

            HuffmanNode f = new HuffmanNode();

            // suma celor doua noduri
            f.data = x.data + y.data;
            f.c = '-';

            f.left = x;
            f.right = y;

            root = f;

            q.add(f);
        }

        // print
        printCode(root, "");
    }
}



// Cod Hamming

import java.util.Scanner;

class Hamming {
    public static void main(String args[]) {
        Scanner scan = new Scanner(System.in);
        System.out.print("Mesaj: "); // ex. 1001
        String mesaj = scan.next();
        int a[] = new int[mesaj.length()];

        for (int i = 0; i < mesaj.length(); i++) {
            a[i] = Character.getNumericValue(mesaj.charAt(i));
        }

        int b[] = generateCode(a);

        System.out.print("Codul Hamming: ");
        for (int i = 0; i < b.length; i++) {
            System.out.print(b[i]);
        }
        System.out.println();

        // Differenta in dintre original si noua array e numarul de biti de paritate adaugat.
        System.out.print("Pozitia bit-ului eroare: ");
        int error = scan.nextInt();
        if (error != 0) {
            b[error - 1] = (b[error - 1] + 1) % 2;
        }
        System.out.print("Codul trimis: ");
        for (int i = 0; i < b.length; i++) {
            System.out.print(b[i]);
        }
        System.out.println();
        receive(b, b.length - a.length);
    }

    static int[] generateCode(int a[]) {
        // rezultatul returnat
        int b[];

        // gasim nr. de biti de paritate necesar:
        int i = 0, parity_count = 0, j = 0, k = 0;
        while (i < a.length) {
            // 2^(biti de paritate) trebuie sa fie egal cu positia curenta
            // pozitia curenta este (nr. de biti traversati + nr. de biti de paritate + 1).
            // +1 e necesar pt ca array-ul incepe de la 0 insa noi incepem de la 1.

            if (Math.pow(2, parity_count) == i + parity_count + 1) {
                parity_count++;
            } else {
                i++;
            }
        }

        // Lungimea "b" este lungimea datelor originale (a) + numărul biților de paritate.
        b = new int[a.length + parity_count];

        // Inițializam matricea cu "2" pentru a indica o valoare "ne-setata" în locațiile de paritate:

        for (i = 1; i <= b.length; i++) {
            if (Math.pow(2, j) == i) {
                // Am gasit un bit de paritate
                // Ajustam cu (-1) pentru a ține cont de indicii matricei pornind de la 0 în loc de 1.

                b[i - 1] = 2;
                j++;
            } else {
                b[k + j] = a[k++];
            }
        }
        for (i = 0; i < parity_count; i++) {
            // Setam biti de paritate pari:

            b[((int) Math.pow(2, i)) - 1] = getParity(b, i);
        }
        return b;
    }

    static int getParity(int b[], int power) {
        int parity = 0;
        for (int i = 0; i < b.length; i++) {
            if (b[i] != 2) {
                // Daca "i" nu conține o valoare ne-setata
                // Vom salva acea valoare a indicelui in k, o vom mari cu 1,
                // Apoi convertim in binar:

                int k = i + 1;
                String s = Integer.toBinaryString(k);

                // Daca bitul la locația 2 ^ (putere) a valorii binare a indexului este 1,
                // Apoi trebuie să verificăm valoarea stocată în acea locatie.
                // Verificam daca este 1 sau 0, vom calcula valuarea de paritate.

                int x = ((Integer.parseInt(s)) / ((int) Math.pow(10, power))) % 10;
                if (x == 1) {
                    if (b[i] == 1) {
                        parity = (parity + 1) % 2;
                    }
                }
            }
        }
        return parity;
    }

    static void receive(int a[], int parity_count) {
        // Primeste un code Hamming in array-ul 'a'.
        // We also require the number of parity bits added to the original data.
        // Now it must detect the error and correct it, if any.

        int power;
        // Vom folosi "power" pentru a găsi bitii corecti pentru a verifica paritatea.

        int parity[] = new int[parity_count];
        // stocheaza valorile verificarilor de paritate.

        String syndrome = new String();
        // 'syndrome' sir va fi folosit pentru a stoca valoarea int-ul locatiei de eroare.

        for (power = 0; power < parity_count; power++) {

            for (int i = 0; i < a.length; i++) {
                // Extragem bit-ul 2 ^ (putere):

                int k = i + 1;
                String s = Integer.toBinaryString(k);
                int bit = ((Integer.parseInt(s)) / ((int) Math.pow(10, power))) % 10;
                if (bit == 1) {
                    if (a[i] == 1) {
                        parity[power] = (parity[power] + 1) % 2;
                    }
                }
            }
            syndrome = parity[power] + syndrome;
        }

        System.out.println();
        System.out.print("Codul primit: ");
        for (int i = 0; i < a.length; i++) {
            System.out.print(a[i]);
        }
        System.out.println();
        int error_location = Integer.parseInt(syndrome, 2);
        if (error_location != 0) {
            System.out.println("Eroarea este la pozitia: " + error_location);
            a[error_location - 1] = (a[error_location - 1] + 1) % 2;
            System.out.print("Codul corectat: ");
            for (int i = 0; i < a.length; i++) {
                System.out.print(a[i]);
            }
            System.out.println();
        } else {
            System.out.print("Nu este nici o eroarea in codul primit");
        }

        // Extragem datele originale din codul primit (si corectat):
        System.out.print("Mesajul original trimis: ");
        power = parity_count - 1;
        for (int i = a.length; i > 0; i--) {
            if (Math.pow(2, power) != i) {
                System.out.print(a[i - 1]);
            } else {
                power--;
            }
        }
        System.out.println();
    }
}
