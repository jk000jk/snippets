// extra
#include <iostream>

using namespace std;

struct Nod
{
    int info;
    Nod *link;
};

Nod *HEAD = NULL;


void inserare_la_inceput(int elem_nou) {
	Nod *node = new Nod;
	node->info = elem_nou;	
	node->link = HEAD;
	HEAD = node;
}

void inserare_la_sfarsit(int elem_nou) {
	Nod *node = new Nod;
	node->info = elem_nou;
	node->link = NULL;
	
	Nod *current = HEAD;
	while(current != NULL && current->link != NULL) {
		current = current->link;	
	}
	if (current) {
		current->link = node;
	} else {
	    HEAD = node;	
	}
}

void stergere_la_inceput() {
	if (HEAD == NULL) {
		return;
	}
	
	HEAD = HEAD->link;
}


void inserare_dupa(int elem, int k) {
	if (HEAD == NULL) {
		return;
	}
	Nod *node = new Nod;
	node->info = elem;
	node->link = NULL;	
	
}

void stergere_la_sfarsit() {
	if (HEAD == NULL) {
		return;
	}
	
	Nod *current = HEAD;
	while(current != NULL && current->link != NULL && current->link->link != NULL) {
		current = current->link;	
	}
	if (current->link) {
		current->link = NULL;
	} else {
	    HEAD->link = NULL;	
	}
}



void stergere_elem(int elem) {
	
}

void accesare_elem(int k) {
	
}

void modificare_elem(int k, int elem) {
	
}

bool cautare_elem(int elem) {
	return false;
}

void creare_lista(int n) {
	
}

void afisare_lista() {
	if (HEAD == NULL) {
		cout << "..." << endl;
		return;
	}
	
	Nod *current = HEAD;
	while (current != NULL) {
		cout << current->info << "->";
		current = current->link;
	}
	cout << endl;
}

int main2()
{
    int elem_nou, dupa, elem_sters;

    cout << "Implementare lista inlantuita" << endl;
    while(true)
    {
    cout << endl << "Operatii posibile:" << endl;
    cout << "1.Inserare la inceput" << endl;
    cout << "2.Inserare la sfarsit" << endl;
    cout << "3.Inserare dupa un element" << endl;
    cout << "4.Stergere la inceput" << endl;
    cout << "5.Stergere la sfarsit" << endl;
    cout << "6.Stergerea unui element dat" << endl;
    cout << "7.Accesarea unui element dat" << endl;
    cout << "8.Modificarea unui element dat" << endl;
    cout << "9.Cautarea unui elem dat" << endl;
    cout << "10.Creare lista" << endl;
    cout << "11.Afisare lista" << endl;
    cout << "Orice alt input---exit" << endl;
    cout << "Introduceti optiunea: ";
    int opt;
    cin >> opt;
        switch(opt)
        {
        case 1:  cout << "Introduceti valoarea de inserat : ";
                 cin >> elem_nou;
                 inserare_la_inceput(elem_nou);
                 break;
        case 2:  cout << "Introduceti valoarea de inserat : ";
                 cin >> elem_nou;
                 inserare_la_sfarsit(elem_nou);
                 break;
        case 3:  cout << "Introduceti valoarea de inserat : ";
                 cin >> elem_nou;
                 cout << "Dupa ce element?";
                 cin >> dupa;
                 inserare_dupa(elem_nou, dupa);
                 break;
        case 4:  stergere_la_inceput();
                 break;
        case 5:  stergere_la_sfarsit();
                 break;
        case 6:  cout << "Introduceti valoarea de sters : ";
                 cin >> elem_sters;
                 stergere_elem(elem_sters);
                 break;
        case 7:  cout << "Introduceti pozitia elem in lista : ";
                 int k;
                 cin >> k;
                 accesare_elem(k);
                 break;
        case 8:  cout << "Introduceti pozitia elem in lista : ";
                 cin >> k;
                 cout << "Introduceti noua valoare : ";
                 cin >> elem_nou;
                 modificare_elem(k,elem_nou);
                 break;
        case 9:  cout << "Introduceti valoarea de cautat : ";
                 int elem;
                 cin >> elem;
                 if(cautare_elem(elem)) cout << "Elementul a fost gasit" << endl;
                 else cout << "Elementul nu a fost gasit" << endl;
                 break;
        case 10:  cout << "nr elem = ";
                 int n;
                 cin >> n;
                 creare_lista(n);
                 break;
        case 11: cout << "Lista este:" << endl;
                 afisare_lista();
                 break;
        default: return 0;
        }
    }

    return 0;
}



# include <iostream>

using namespace std;


int SIZE;
int TOP = -1;
int *stack;

bool isEmpty() {
	return TOP == -1;	
}

bool isFull() {
	return TOP == (SIZE - 1);
}

int push(int n){
    if (isFull()) {
        return 0;
    }
    return stack[++TOP] = n;
}

int pop(){
    if (isEmpty()) { 
		return 0; 
	}
	return stack[--TOP];	
}

void print(){
	cout << "----" << endl;
    for(int i = TOP; i >= 0; i--)
        cout << stack[i] << endl;
	cout << "----" << endl;
}

int main2() {
   int choice, n, temp;
	
   cout << "Dimensiune = ";		
   cin >> SIZE;
  
   stack = new int[SIZE];	

     do
    {
        cout << endl;
        cout <<"0 - Exit" << endl;
        cout <<"1 - Push" << endl;
        cout <<"2 - Pop" << endl;
        cout <<"3 - Print" << endl;
         
        cin >> choice;
         
        switch(choice){
            case 0: break;
            case 1:
                cout << "n = ";
                cin >> n;
                temp = push(n);
                if(temp == 0)
                    cout << "OVERFLOW" << endl;
            break;
            case 2:
                temp = pop();
                if(temp == 0)
                    cout << "UNDERFLOW" << endl;
            break;
            case 3:
                print();
                break;             
            default:
                print();
        }  
    } while(choice != 0);	   
	
	return 0;
}



# include <iostream>

using namespace std;

struct node
{
    int data;
    node *next;
}*front = NULL,*rear = NULL,*p = NULL,*np = NULL;
 
void push(int x)
{
    np = new node;
    np->data = x;
    np->next = NULL;
    if(front == NULL)
    {
        front = rear = np;
        rear->next = NULL;
    }
    else
    {
        rear->next = np;
        rear = np;
        rear->next = NULL;
    }
}
int remove()
{
    int x;
    if(front == NULL)
    {
        cout << "...";
    }
    else
    {
        p = front;
        x = p->data;
        front = front->next;
        delete(p);
        return(x);
    }
}

void printq(){
	cout << "----" << endl;
    while (front != NULL) {
	  cout << front->data << " ";
	  front = front->next;	
	}		
	cout << "----" << endl;
}

int main() {
   int choice, n, temp;
   stack = new int[SIZE];	

     do
    {
        cout << endl;
        cout <<"0 - Exit" << endl;
        cout <<"1 - Enqueue" << endl;
        cout <<"2 - Dequeue" << endl;
        cout <<"3 - Print" << endl;
         
        cin >> choice;
         
        switch(choice){
            case 0: break;
            case 1:
                cout << "n = ";
                cin >> n;
                temp =push(n);
            break;
            case 2:
                remove();
            break;
            case 3:
                printq();
                break;             
            default:
                printq();
        }  
    } while(choice != 0);	   
	
	return 0;
}


