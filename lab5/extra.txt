// Tema implement binary search tree

#include <iostream>
using namespace std;

struct NodArb
{
    int info;
   NodArb  *stang;
    NodArb   *drept;
    };

NodArb *rad= NULL;

int inaltime(NodArb *rad){
 if(rad==NULL|| rad->drept==NULL && rad->stang==NULL) return 0;
 int l=inaltime(rad->stang);
 int r=inaltime(rad->drept);
 if(l>=r) return l+1;
 else return r+1;
}
 
void creaza_arbore()
{

     int n;cout << "n=";
        cin >> n;
        for (int i=1; i<=n; i++)
        {int a; cin >> a; inserare(a);
        }

}

void tiparire_arbore(NodArb* rad)
// tipareste arbore rotit cu 90 grade dreapta
{
   if(rad==NULL)
   cout <<"NULL\n";
   else
   {
      cout <<"rad = "<< rad ->info<<endl;
       cout <<"Subarbore stang al lui "<< rad -> info<<endl;
       tiparire_arbore(rad -> stang);
       cout << "Subarbore drept al lui " << rad -> info<<endl;
       tiparire_arbore(rad -> drept);
       }

}

NodArb* cauta(NodArb *rad, int a) {
	if (rad == NULL) return NULL;
	
	if (rad->info == a) {
			return rad;
	} else {
		NodArb *p = cauta(rad->stang, a);
		return (p != NULL) ? p : cauta(rad->drept, a);
	}
}

NodArb* cautabc(NodArb *rad, int a) {
	if (rad == NULL) return NULL;
	
	if (rad->info == a) {
			return rad;
	} else {
		if (rad->info > a) {
			return cautabc(rad->stanga, a);
		}
		return cautabc(rad->dreapt, a)
	}
}

int main()
{

 // printf("Construim arborele...\n");
  creaza_arbore();
//  printf("\n\nTiparire arbore\n\n");
  tiparire_arbore(rad);
cout << "inaltime="<<inaltime(rad)<<endl;


 if (cauta(rad, a)) cout << "gasit";	
 else cout << "nu a fost gasit";

 return 0;

}
