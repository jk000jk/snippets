package javaapplication4;

import java.io.*;
import java.util.HashMap;

public class Main {

    public static void main(String[] args) {
        HashMap<Character, Integer> hmap = new HashMap<Character, Integer>();
        File file = new File("C:/Users/User7/Desktop/NewFolder/file.txt");
        char[] chars = new char[(int) file.length()];
        try {
           FileReader reader = new FileReader(file);
           reader.read(chars);
           reader.close();
        } catch (IOException e) {
           System.out.println(e.getMessage());
        }

     
        for (int i = 0; i < chars.length; i++) {
            if (hmap.containsKey(chars[i])) {
                 hmap.put(chars[i], hmap.get(chars[i]) + 1);
            } else {
                 hmap.put(chars[i], 1);
            }
        }

        for (Character key : hmap.keySet()) {
            System.out.println(key + ": "
                    + hmap.get(key)/(float)chars.length * 100 + "%");
       }
       double entropy = entropyc(hmap, chars.length);
       double redundancy = Log2(256) - entropy;
       double efficiency = entropy / Log2(256);
       System.out.println("Entropy: " + entropy);
       System.out.println("Redundancy: " + redundancy);
       System.out.println("Efficiency: " + efficiency);

       double prob = 0.0;
       for (Character key : hmap.keySet()) {
            prob += hmap.get(key)/(float)chars.length;
       }

       System.out.println();
       System.out.println(prob);

       System.out.println("---------------------------");
       System.out.println();
       
        HashMap<Byte, Integer> hmap2 = new HashMap<Byte, Integer>();
        File filebin = new File("C:/Users/User7/Desktop/NewFolder/flower.bmp");
        byte[] binData = new byte [(int)filebin.length()];
        try {
           FileInputStream reader = new FileInputStream(filebin);
           reader.read(binData);
           reader.close();
        } catch (IOException e) {
           System.out.println(e.getMessage());
        }

       
        for (int i = 0; i < binData.length; i++) {
            if (hmap2.containsKey(binData[i])) {
                 hmap2.put(binData[i], hmap2.get(binData[i]) + 1);
            } else {
                 hmap2.put(binData[i], 1);
            }
        }


        for (Byte key : hmap2.keySet()) {
            System.out.println(key + ": "
                    + hmap2.get(key)/(float)binData.length * 100 + "%");
        }

         double entropybin = entropy(hmap2, binData.length);
         double redundancybin = Log2(2) - entropybin;
         double efficiencybin = entropybin / Log2(2);
         System.out.println("Entropy: " + entropybin);
         System.out.println("Redundancy: " + redundancybin);
         System.out.println("Efficiency: " + efficiencybin);
         System.out.println();

         double probbin = 0.0;
         for (Byte key : hmap2.keySet()) {
            probbin += hmap2.get(key)/(float)binData.length;
        }
        System.out.println(probbin);
    }

    private static double entropy(HashMap<Byte, Integer> hmap, int length) {
        double entropy = 0;
        for (Byte key : hmap.keySet()) {
             double prob = (double) hmap.get(key)/length;
             entropy -= prob * Log2(prob);
        }
        return entropy;
    }

     private static double entropyc(HashMap<Character, Integer> hmap, int length) {
        double entropy = 0;
        for (Character key : hmap.keySet()) {
             double prob = (double) hmap.get(key)/length;
             entropy -= prob * Log2(prob);
        }
        return entropy;
    }

    private static double Log2(double n) {
           return Math.log(n) / Math.log(2);
    }

}


/* Huffman coding , decoding */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.TreeMap;



public class Huffman {
    static final boolean readFromFile = false;
    static final boolean newTextBasedOnOldOne = false;

    static PriorityQueue<Node> nodes = new PriorityQueue<>((o1, o2) -> (o1.value < o2.value) ? -1 : 1);
    static TreeMap<Character, String> codes = new TreeMap<>();
    static String text = "";
    static String encoded = "";
    static String decoded = "";
    static int ASCII[] = new int[128];

    public static void main(String[] args) throws FileNotFoundException {
        Scanner scanner = (readFromFile) ? new Scanner(new File("input.txt")) : new Scanner(System.in);
        int decision = 1;
        while (decision != -1) {
            if (handlingDecision(scanner, decision)) continue;
            decision = consoleMenu(scanner);
        }
    }

    private static int consoleMenu(Scanner scanner) {
        int decision;
        System.out.println("\n---- Menu ----\n" +
                "-- [-1] to exit \n" +
                "-- [1] to enter new text\n" +
                "-- [2] to encode a text\n" +
                "-- [3] to decode a text");
        decision = Integer.parseInt(scanner.nextLine());
        if (readFromFile)
            System.out.println("Decision: " + decision + "\n---- End of Menu ----\n");
        return decision;
    }

    private static boolean handlingDecision(Scanner scanner, int decision) {
        if (decision == 1) {
            if (handleNewText(scanner)) return true;
        } else if (decision == 2) {
            if (handleEncodingNewText(scanner)) return true;
        } else if (decision == 3) {
            handleDecodingNewText(scanner);
        }
        return false;
    }

    private static void handleDecodingNewText(Scanner scanner) {
        System.out.println("Enter the text to decode:");
        encoded = scanner.nextLine();
        System.out.println("Text to Decode: " + encoded);
        decodeText();
    }

    private static boolean handleEncodingNewText(Scanner scanner) {
        System.out.println("Enter the text to encode:");
        text = scanner.nextLine();
        System.out.println("Text to Encode: " + text);

        if (!IsSameCharacterSet()) {
            System.out.println("Not Valid input");
            text = "";
            return true;
        }
        encodeText();
        return false;
    }

    private static boolean handleNewText(Scanner scanner) {
        int oldTextLength = text.length();
        System.out.println("Enter the text:");
        text = scanner.nextLine();
        if (newTextBasedOnOldOne && (oldTextLength != 0 && !IsSameCharacterSet())) {
            System.out.println("Not Valid input");
            text = "";
            return true;
        }
            ASCII = new int[128];
            nodes.clear();
            codes.clear();
            encoded = "";
            decoded = "";
            System.out.println("Text: " + text);
            calculateCharIntervals(nodes, true);
            buildTree(nodes);
            generateCodes(nodes.peek(), "");

            printCodes();
            System.out.println("-- Encoding/Decoding --");
            encodeText();
            decodeText();
            return false;



    }

    private static boolean IsSameCharacterSet() {
        boolean flag = true;
        for (int i = 0; i < text.length(); i++)
            if (ASCII[text.charAt(i)] == 0) {
                flag = false;
                break;
            }
        return flag;
    }

    private static void decodeText() {
        decoded = "";
        Node node = nodes.peek();
        for (int i = 0; i < encoded.length(); ) {
            Node tmpNode = node;
            while (tmpNode.left != null && tmpNode.right != null && i < encoded.length()) {
                if (encoded.charAt(i) == '1')
                    tmpNode = tmpNode.right;
                else tmpNode = tmpNode.left;
                i++;
            }
            if (tmpNode != null)
                if (tmpNode.character.length() == 1)
                    decoded += tmpNode.character;
                else
                    System.out.println("Input not Valid");

        }
        System.out.println("Decoded Text: " + decoded);
    }

    private static void encodeText() {
        encoded = "";
        for (int i = 0; i < text.length(); i++)
            encoded += codes.get(text.charAt(i));
        System.out.println("Encoded Text: " + encoded);
    }

    private static void buildTree(PriorityQueue<Node> vector) {
        while (vector.size() > 1)
            vector.add(new Node(vector.poll(), vector.poll()));
    }

    private static void printCodes() {
        System.out.println("--- Printing Codes ---");
        codes.forEach((k, v) -> System.out.println("'" + k + "' : " + v));
    }

    private static void calculateCharIntervals(PriorityQueue<Node> vector, boolean printIntervals) {
        if (printIntervals) System.out.println("-- intervals --");

        for (int i = 0; i < text.length(); i++)
            ASCII[text.charAt(i)]++;

        for (int i = 0; i < ASCII.length; i++)
            if (ASCII[i] > 0) {
                vector.add(new Node(ASCII[i] / (text.length() * 1.0), ((char) i) + ""));
                if (printIntervals)
                    System.out.println("'" + ((char) i) + "' : " + ASCII[i] / (text.length() * 1.0));
            }
    }

    private static void generateCodes(Node node, String s) {
        if (node != null) {
            if (node.right != null)
                generateCodes(node.right, s + "1");

            if (node.left != null)
                generateCodes(node.left, s + "0");

            if (node.left == null && node.right == null)
                codes.put(node.character.charAt(0), s);
        }
    }
}

class Node {
    Node left, right;
    double value;
    String character;

    public Node(double value, String character) {
        this.value = value;
        this.character = character;
        left = null;
        right = null;
    }

    public Node(Node left, Node right) {
        this.value = left.value + right.value;
        character = left.character + right.character;
        if (left.value < right.value) {
            this.right = right;
            this.left = left;
        } else {
            this.right = left;
            this.left = right;
        }
    }
}
