// 

#include <iostream>

using namespace std;

struct Nod
{
    int info;
    Nod *link;
};

Nod *HEAD = NULL;


void inserare_la_inceput(int elem_nou) {
	Nod *node = new Nod;
	node->info = elem_nou;	
	node->link = HEAD;
	HEAD = node;
}

void inserare_la_sfarsit(int elem_nou) {
	Nod *node = new Nod;
	node->info = elem_nou;
	node->link = NULL;
	
	Nod *current = HEAD;
	while(current != NULL && current->link != NULL) {
		current = current->link;	
	}
	if (current) {
		current->link = node;
	} else {
	    HEAD = node;	
	}
}

void stergere_la_inceput() {
	if (HEAD == NULL) {
		return;
	}
	
	HEAD = HEAD->link;
}


void inserare_dupa(int elem, int k) {
	if (HEAD == NULL) {
		return;
	}
	Nod *node = new Nod;
	node->info = elem;
	node->link = NULL;	
	
}

void stergere_la_sfarsit() {
	if (HEAD == NULL) {
		return;
	}
	
	Nod *current = HEAD;
	while(current != NULL && current->link != NULL && current->link->link != NULL) {
		current = current->link;	
	}
	if (current->link) {
		current->link = NULL;
	} else {
	    HEAD->link = NULL;	
	}
}



void stergere_elem(int elem) {
	
}

void accesare_elem(int k) {
	
}

void modificare_elem(int k, int elem) {
	
}

bool cautare_elem(int elem) {
	return false;
}

void creare_lista(int n) {
	
}

void afisare_lista() {
	if (HEAD == NULL) {
		cout << "..." << endl;
		return;
	}
	
	Nod *current = HEAD;
	while (current != NULL) {
		cout << current->info << "->";
		current = current->link;
	}
	cout << endl;
}

int main()
{
    int elem_nou, dupa, elem_sters;

    cout << "Implementare lista inlantuita" << endl;
    while(true)
    {
    cout << endl << "Operatii posibile:" << endl;
    cout << "1.Inserare la inceput" << endl;
    cout << "2.Inserare la sfarsit" << endl;
    cout << "3.Inserare dupa un element" << endl;
    cout << "4.Stergere la inceput" << endl;
    cout << "5.Stergere la sfarsit" << endl;
    cout << "6.Stergerea unui element dat" << endl;
    cout << "7.Accesarea unui element dat" << endl;
    cout << "8.Modificarea unui element dat" << endl;
    cout << "9.Cautarea unui elem dat" << endl;
    cout << "10.Creare lista" << endl;
    cout << "11.Afisare lista" << endl;
    cout << "Orice alt input---exit" << endl;
    cout << "Introduceti optiunea: ";
    int opt;
    cin >> opt;
        switch(opt)
        {
        case 1:  cout << "Introduceti valoarea de inserat : ";
                 cin >> elem_nou;
                 inserare_la_inceput(elem_nou);
                 break;
        case 2:  cout << "Introduceti valoarea de inserat : ";
                 cin >> elem_nou;
                 inserare_la_sfarsit(elem_nou);
                 break;
        case 3:  cout << "Introduceti valoarea de inserat : ";
                 cin >> elem_nou;
                 cout << "Dupa ce element?";
                 cin >> dupa;
                 inserare_dupa(elem_nou, dupa);
                 break;
        case 4:  stergere_la_inceput();
                 break;
        case 5:  stergere_la_sfarsit();
                 break;
        case 6:  cout << "Introduceti valoarea de sters : ";
                 cin >> elem_sters;
                 stergere_elem(elem_sters);
                 break;
        case 7:  cout << "Introduceti pozitia elem in lista : ";
                 int k;
                 cin >> k;
                 accesare_elem(k);
                 break;
        case 8:  cout << "Introduceti pozitia elem in lista : ";
                 cin >> k;
                 cout << "Introduceti noua valoare : ";
                 cin >> elem_nou;
                 modificare_elem(k,elem_nou);
                 break;
        case 9:  cout << "Introduceti valoarea de cautat : ";
                 int elem;
                 cin >> elem;
                 if(cautare_elem(elem)) cout << "Elementul a fost gasit" << endl;
                 else cout << "Elementul nu a fost gasit" << endl;
                 break;
        case 10:  cout << "nr elem = ";
                 int n;
                 cin >> n;
                 creare_lista(n);
                 break;
        case 11: cout << "Lista este:" << endl;
                 afisare_lista();
                 break;
        default: return 0;
        }
    }

    return 0;
}



// TAD

# include <stdio.h>
# include <time.h>
# include <stdlib.h>

int main2() {
	FILE *f;
	int min, max, r, i, n;

	printf("Nr Val: ");
	scanf("%d", &n);

	printf("Min: ");
	scanf("%d", &min);

	printf("Max: ");
	scanf("%d", &max);

	f = fopen("rand.txt", "w");

    srand(time(NULL));
    fprintf(f, "%d \n", n);

	for (i = 0; i < n; i++) {
		r = rand() * rand();
		r = min + r % (max - min + 1);
		fprintf(f, "%d ", r);
    }

    fclose(f);

    return 0;
}

# include <iostream>
# include <fstream>
# include <iomanip>
# include <time.h>
# include <limits.h>

using namespace std;


/*
	Se considera un sir format din n nr intregi, sa se determine o secventa din sirul dat, 
    cu proprietarea ca suma elementelor este maxima.
	(secventa = valori aflate pe pozitii strict consecutive, subsir = valori aflate pe poz strict crescator 
    (nu neaparat strict consecutive))
*/

// O(n^3), t = n^3 * 5 * 10^-9, s <= 1s
// n^3 <= 1/5 * 10^9 => n <= 10^3
void smax3(int v[], int n) {
	int i, j, k, scrt, smax;
	smax = v[0];
	
	for (i = 0; i < n; i++) {
		for (j = i; j < n; j++) {
			scrt = 0;
			for (k = i; k <= j; k++) {
				scrt += v[k];
			}
			if (scrt > smax) {
				smax = scrt;
			}				
		}
	}
}

// O(n^2), t = n^2 * 5 * 10^9, s <= 1s
// n^2 <= 1/5 * 10^9 => n <= 3 * 10^4 
void smax2(int v[], int n) {
	int i, j, scrt, smax;
	smax = v[0];
	
	for (i = 0; i < n; i++) {
		scrt = 0;
		for (j = i; j < n; j++) {
			scrt += v[j];
            if (scrt > smax) {
				smax = scrt;
			}				
		}
	}
}

// O(n), t = n * 5 * 10^-9, s <= 1s
// n <= 1/5 * 10^9
void smax(int v[], int n) {
	int i, j, scrt, smax;
	smax = INT_MIN;
	scrt = 0;
	for (i = 0; i < n; i++) {
		if (scrt < 0) scrt = v[i];
		else scrt += v[i];
		
		if (scrt > smax) {
			smax = scrt;
		}			
	}
}


int main() {
	int *v, n;
	double t;
	
	ifstream f("rand.txt"); 
	f >> n;
	
	v = new int[n];
	
	for (int i = 0; i < n; i++) {
	  f >> v[i];
    }
	
	t = clock();
	smax3(v, n);
	t = clock() - t;
	
	printf("Time n^3: %.03lf \n", t / CLOCKS_PER_SEC);
	
	t = clock();
	smax2(v, n);
	t = clock() - t;
	
	printf("Time n^2: %.03lf \n", t / CLOCKS_PER_SEC);
	

        t = clock();
	smax(v, n);
	t = clock() - t;
	
	printf("Time n: %.03lf \n", t / CLOCKS_PER_SEC);

	return 0;
}


// OOP


# include <iostream>

using namespace std;

class Data 
{
	int zi, luna, an;

public:
	Data() {
		zi = 20;
		luna = 10;
		an = 2017;
	}
	
	Data(int zi, int luna, int an) {
		this->zi = zi;
		this->luna = luna;
		this->an = an;
	}
	
		
	Data(int zi, int luna) {
		this->zi = zi;
		this->luna = luna;
		this->an = 2017;
	}
	
		
	Data(int zi) {
		this->zi = zi;
		this->luna = 10;
		this->an = 2017;
	}
	
	void setZi(int zi) {
		this->zi = zi;
	}
			
	void setLuna(int luna) {
		this->luna = luna;
	}
	
	void setAn(int an) {
		this->an = an;
	}
	
	int getZi() {
		return zi;
	}
	
	int getLuna() {
		return luna;
	}
	
	int getAn() {
		return an;
	}
	
	void print() {
		cout << zi << "/" << luna << "/" << an << endl;
	}
};


int main() {
	Data ob;
	ob.print();
	
	ob.setZi(21);
	ob.setLuna(11);
	ob.setAn(2018);
	ob.print();
	
	cout << ob.getZi();
	
	return 0;
}


// 2

class Carte {
	char* titlu;
	int anAparitie;
	char *editura;
	char *autor;
public:
	Carte();
	Carte(char *titlu, char* autor, char* editura, int anAparitie);
	Carte(char *titlu, char* editura);
	Carte(char *titlu, int an);
	~Carte();
	void afisare();
	char *getTitlu();
	int getAnAparitie();
	char *getEditura();
	char *getAutor();
	void setTitlu(char *t);
	void setAnAparitie(int a);
	void setEditura(char *ed);
	void setAutor(char* a);
};



# include <iostream>
# include "Carte.h"

using namespace std;

Carte::Carte() {
	titlu = new char[4];
	strcpy(titlu, "####");
	
	autor = new char[4];
	strcpy(autor, "####");
	
	editura = new char[4];
	strcpy(editura, "####");
	
	anAparitie = 2017;
}


Carte::Carte(char *titlu, char* autor, char* editura, int anAparitie) {
	this->titlu = new char[strlen(titlu) + 1];
	strcpy(this->titlu,  titlu);
	
	this->autor = new char[strlen(autor) + 1];
	strcpy(this->autor,  autor);
	
	this->editura = new char[strlen(editura) + 1];
	strcpy(this->editura,  editura);
	
	this->anAparitie = anAparitie;
}

Carte::Carte(char *titlu, char* editura) {
	this->titlu = new char[strlen(titlu) + 1];
	strcpy(this->titlu,  titlu);
	
	this->editura = new char[strlen(editura) + 1];
	strcpy(this->editura,  editura);
	
	this->autor = new char[4];
	strcpy(this->autor,  "####");
	
	this->anAparitie = 2017;
}


Carte::Carte(char *titlu, int anAparitie) {
	this->titlu = new char[strlen(titlu) + 1];
	strcpy(this->titlu,  titlu);
	
	autor = new char[4];
	strcpy(autor, "####");
	
	editura = new char[4];
	strcpy(editura, "####");
	
	this->anAparitie = anAparitie;
}

Carte::~Carte() {
	if (this->titlu)
		delete []titlu; 
	if (this->autor)
		delete []autor;
	if (this->editura)
		delete []editura;
}

void Carte::afisare() {
	cout << titlu << " " << autor << " " << editura << " " << anAparitie << endl;
}


char* Carte::getTitlu(){
	return titlu;
}

int Carte::getAnAparitie(){
	return anAparitie;
}

char* Carte::getEditura(){
	return editura;
}

char* Carte::getAutor(){
	return autor;
}

void Carte::setTitlu(char *t){
	if (titlu) {
		delete []titlu; 
	}
	this->titlu = new char[strlen(t) + 1];
	strcpy(this->titlu,  t);
}

void Carte::setAnAparitie(int a){
	this->anAparitie = a;
}

void Carte::setEditura(char *ed){
	if (editura) {
		delete []editura; 
	}
	this->editura = new char[strlen(ed) + 1];
	strcpy(this->editura,  ed);
}

void Carte::setAutor(char* a){
	if (autor) {
		delete []autor; 
	}
	this->autor = new char[strlen(a) + 1];
	strcpy(this->autor,  a);
}

