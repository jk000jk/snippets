// 1

# include<stdio.h>
# include<stdlib.h>
# include<string.h>

void sort (int v[], int n) {
	int sort, i, aux;
	do {
		sort = 1;
		for(i = 0; i < n - 1; i++)
			if (v[i] > v[i + 1]) {
				aux = v[i];
				v[i] = v[i + 1];
				v[i + 1] = aux;
				sort = 0;
			}
	} while (sort == 0);		
}

int main() {
	FILE *fin, *fout;
	char linie[1001], *p;
	int v[50], k, i;
	
	fin = fopen("nr.txt", "r");
	fout = fopen("sort.txt", "w");
	
	while(fgets(linie, 1001, fin) != NULL){
		int x;
		k = 0;
		p = strtok(linie, " \n");
		while (p != NULL) {
			sscanf(p, "%d", &x);
			v[k++] = x;
			p = strtok(NULL, " \n");
		}
		sort(v, k);
		for (i = 0; i < k; i++)
			fprintf(fout, "%d ", v[i]);
		fprintf(fout, "\n");		     			
	}
	
	fclose(fin);
	fclose(fout);
	
	return 0;
}


// 2

# include<stdio.h>
# include<stdlib.h>
# include<string.h>


int main() {
	FILE *fin, *fout;
	char linie[1001], *p;
	int min, max, k;
	
	fin = fopen("nr.txt", "r");
	fout = fopen("minmax.txt", "w");
	
	while(fgets(linie, 1001, fin) != NULL){	
		p = strtok(linie, " \n");
		sscanf(p, "%d", &min);
		sscanf(p, "%d", &max);
		while (p != NULL) {
			sscanf(p, "%d", &k);
			if (k > max) max = k;
			else if (k < min) min = k;
			p = strtok(NULL, " \n");
		}
		
		fprintf(fout, "%d ", min);
		fprintf(fout, "%d ", max);
		fprintf(fout, "\n");		     			
	}
	
	fclose(fin);
	fclose(fout);
	
	return 0;
}


// 3
# include<stdio.h>
# include<stdlib.h>
# include<string.h>


int main() {
	FILE *fin;
	char line[1001], cuv[30], *p;
	
	fin = fopen("text.txt", "r");
	printf("Cuv = ");
	scanf("%s", cuv);
	int l = 1, c;
	
	
	while(fgets(line, 1001, fin) != NULL){	
		p = strtok(line, " ,.!?\n");
		while (p != NULL) {
			if (strcmp(p, cuv) == 0)
					printf("(%d, %d)", l, c);
			c++;
			p = strtok(NULL, " ,.!?\n");
		}
		l++; 		 	     			
	}
	
	fclose(fin);
	
	return 0;
}


// 4

# include<stdio.h>
# include<stdlib.h>
# include<string.h>


int main() {
	FILE *f1, *f2;
	int cant;
	float price, x = 0.0;
	char name[50];
	
	f1 = fopen("prod.txt", "r");
	f2 = fopen("stock.txt", "r");
	
	while(fscanf(f, "%s %d $f", name, &cant, &price) == 3){
		x += cant * price;
		fprintf(f2, "%f \n", cant * price);		
	}
	fprintf(f2, "%f", x)
	
	fclose(f1);
	fclose(f2)
	

	return 0;
}
