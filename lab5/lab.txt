#pragma once
#include "AngajatUTM.h"

class TESA:public AngajatUTM {
	static double spor;
public:
	TESA();
	TESA(int cod, char* nume, double salariu);
	~TESA();
	double TESA::calculSpor();
};


#pragma once
#include "AngajatUTM.h"

class CadreDidactice:public AngajatUTM
{
	static double spor;
public:
	CadreDidactice();
	CadreDidactice(int cod, char* nume, double salariu);
	~CadreDidactice();
	double calculSpor();
	static double getSpor();
	static void setSpor(double v);
};


#pragma once

class AngajatUTM {
protected:
	char* nume;
	int cod;
	double salariu;
public: 
	AngajatUTM();
	AngajatUTM(int cod, char* nume, double salariu);
	virtual ~AngajatUTM();
	void setCod(int cod);
	void setNume(char *nume);
	void setSalariu(double salariu);
	int getCod();
	char* getNume();
	double getSalariu();
	virtual double calculSpor() = 0;
};



#include <iostream.h>
#include "AngajatUTM.h"
#include "TESA.h"
#include "CadreDidactice.h"
#include <fstream>

using namespace std;

int main() {
	ifstream f("Angajati.txt");
	int cod;
	char nume[50];
	double salariu;
	AngajatUTM *pob;
	ofstream g("Spor.txt");
	
	
	while (f >> cod >> nume >> salariu) {
		if (cod / 100 == 1) {
			pob = new CadreDidactice(cod, nume, salariu);
		} else {
			pob = new TESA(cod, nume, salariu);
		}
		g << pob->getNume() << ", " << pob->calculSpor() << endl;
	}
	return 0;
}


#include <iostream>
#include "TESA.h"

using namespace std;

double TESA::spor = 0.15;

TESA::TESA() : AngajatUTM() {}
TESA::TESA(int cod, char* nume, double salariu) : AngajatUTM(cod, nume, salariu) { }

TESA::~TESA() { }

double TESA::calculSpor() {
	return salariu + salariu * spor;
}

#include <iostream>
#include "AngajatUTM.h"
#include "CadreDidactice.h"
#include <string.h>

using namespace std;

double CadreDidactice::spor = 0.1;

CadreDidactice::CadreDidactice() : AngajatUTM() { }

CadreDidactice::CadreDidactice(int cod, char* nume, double salariu) : AngajatUTM(cod, nume, salariu) { }

void CadreDidactice::setSpor(double v) {
	spor = v;
}

double CadreDidactice::getSpor() {
	return spor;	
}

double CadreDidactice::calculSpor() {
	return this->salariu + this->salariu*spor;
}
CadreDidactice::~CadreDidactice()
{
	
}


#include <iostream.h>;
#include "AngajatUTM.h"
#include <string.h>

AngajatUTM::AngajatUTM() {
	cod = -1;
	nume = NULL;
	salariu = 1400.00;
}

AngajatUTM::AngajatUTM(int cod, char* nume, double salariu) {
	this->cod = cod;
	this->nume = new char[strlen(nume)+1];
	strcpy(this->nume, nume);
	this->salariu = salariu;
}

AngajatUTM::~AngajatUTM() {
	if (nume) {
		delete[] nume;
	}
}

void AngajatUTM::setCod(int cod){
	this->cod = cod;	
}
void AngajatUTM::setNume(char *nume) {
	if (this->nume) {
		delete []this->nume;
	}		
	this->nume = new char[strlen(nume)+1];
	strcpy(this->nume, nume);
}

void AngajatUTM::setSalariu(double salariu) {
	this->salariu = salariu;
}

int AngajatUTM::getCod() {
	return cod;
}

char* AngajatUTM::getNume() {
	return nume;
}

double AngajatUTM::getSalariu() {
	return salariu;
}

