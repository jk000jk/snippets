
// 3
#include <stdio.h>
#include <stdlib.h>

int main(){
	
	int n, i, j;
	int **v;
	
	printf("n = ");
	scanf("%d", &n);
	
	v = (int **) malloc(n * sizeof(int*)); 	
	for (i = 0; i < n; i++){
		v[i] = (int *)malloc((i + 1) * sizeof(int)); 
		for (j = 0; j < i + 1; j++){ 
		   v[i][j] = j + 1;
		}
	}	
	
	printf(" ");	
	for (i = 0; i < n; i++){ 
		for (j = 0; j < i + 1; j++){ 
			printf("%d ", v[i][j]);
		}	
		printf("\n ");		
	}
	
	printf("\n");	
	for (i = 0; i < n; i++){ 
		for (j = 0; j < i + 1; j++){ 
			printf("v[%d][%d] = %d \n", i, j, v[i][j]);
		}		
	}
	 
	
	for(i = 0; i < n; i++){
		free(v[i]);
	}
	free(v);
	
	return 0;
}


// 4
#include <stdio.h>
#include <stdlib.h>

int main() {
	
	int n, i, j;
	int** a;
	
	printf("n = ");
	scanf("%d", &n);
	
	a = (int**) malloc(n * sizeof(int*));
	for (i = 0; i < n; i++) {
		a[i] = (int *) malloc(i + 1 * sizeof(int));
	}   
	for (i = 0; i < n; i++) {
	   a[i][0] = n - i;
	   a[n - 1][i] = i + 1;
	}
	
	for (i = n - 2; i >= 1; i--) { 
		for (j = 1; j <= i; j++) { 
			a[i][j] = a[i][j - 1] + a[i + 1][j];	
		}
	}
	
	printf(" ");	
	for (i = 0; i < n; i++){ 
		for (j = 0; j < i + 1; j++){ 
			printf("%d ", a[i][j]);
		}	
		printf("\n ");		
	}
	
	for (i = 0; i < n; i++){ 
	   free(a[i]);
	}
	free(a);
	
	return 0; 
}

// 5

#include <stdio.h>
#include <stdlib.h>

int main(){
	
	int n, i, j;
	int** a, b;
    
	printf("n = ");
	scanf("%d", &n);
	
	a = (int**) malloc(n * sizeof(int*));
	for(i = 0; i < n; i++){
		a[i] = (int*) malloc(n * sizeof(int));
	}
	
	for(i = 0; i < n; i++){
		for(j = 0; j < n; j++){
			printf("v[%d][%d] = ", i, j);
			scanf("%d", &a[i][j]);	
		}
	} 
	
	b = (int**) malloc((n - 1) * sizeof(int*));
	for(i = 0; i < n; i++){
		b[i] = (int*) malloc((n - 1) * sizeof(int))
		for(j = 0; j < n; j++){			
			if(i == j) continue;
			b[i][j] = a[i][j];
		}
	}
	
	for(i = 0; i < n; i++){
		for(j = 0; j < n; j++){
			printf("%d ", b[i]);			 	
		}
		printf("\n");
	} 
	
	
	for(i = 0; i < n; i++){
		free(a[i]);
		if(i != n - 1) free(b[i]);
	} 
	
	free(a);
	free(b);
	
	return 0;
}
